{"version":3,"sources":["menu.svg","App.js","reportWebVitals.js","index.js","App.module.css"],"names":["currentMove","difficulties","App","useState","currentPuzzle","setCurrentPuzzle","Chess","puzzles","fen","game","setGame","moveStatus","setMoveStatus","hints","setHints","isSideOpen","SetIsSideOpen","currentMenu","setCurrentMenu","JSON","parse","localStorage","getItem","solvedPuzzles","setSolvedPuzzles","makeMove","move","gameCopy","updateCurrentMove","moves","length","OpenSideBar","CloseSideBar","cards","i","push","className","classes","MenuCard","ContentCard","onClick","prev","newMenu","contents","Title","start","end","PuzzleCard","includes","PuzzleSolvedCard","puzzleNumber","load","config","delta","preventScrollOnSwipe","trackTouch","trackMouse","rotationAngle","swipeDuration","Infinity","touchEventOptions","passive","swipelefthandler","useSwipeable","onSwipedLeft","e","swiperighthandler","onSwipedRight","useEffect","data","stringify","setItem","swipearea","overlay","overlayHidden","SideBar","sideHidden","SideMenu","SidePuzzles","stopPropagation","id","position","arePiecesDraggable","onPieceDrop","source","target","piece","from","to","isCorrect","playedMove","correctMove","gameCopy1","gameCopy2","IsMoveCorrect","setTimeout","boardOrientation","turn","customArrows","boardWidth","isMobile","onSquareClick","s","console","log","msg","button","Correct","Wrong","undo","HintMove","src","menuIcon","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.bfabac02.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/menu.ed9a6949.svg\";","import classes from \"./App.module.css\";\nimport { useEffect, useState } from \"react\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { isMobile } from \"react-device-detect\";\n\nimport { Chess } from \"chess.js\";\nimport { Chessboard } from \"react-chessboard\";\n\nimport menuIcon from \"./menu.svg\";\n\nimport contents from \"./Contents.json\";\nimport puzzles from \"./Puzzles(main).json\";\n\nlet currentMove = 0;\nlet difficulties = [\"Basic\", \"Intermediate\", \"Advanced\"];\n\nfunction App() {\n    const [currentPuzzle, setCurrentPuzzle] = useState(0);\n\n    const [game, setGame] = useState(new Chess(puzzles[currentPuzzle].fen));\n    const [moveStatus, setMoveStatus] = useState(0);\n\n    const [hints, setHints] = useState([]);\n\n    const [isSideOpen, SetIsSideOpen] = useState(false);\n    const [currentMenu, setCurrentMenu] = useState([-1, -1]);\n\n    const [solvedPuzzles, setSolvedPuzzles] = useState(\n        JSON.parse(localStorage.getItem(\"SolvedPuzzles\")) || []\n    );\n\n    // let IsPromotion = (from, to, piece) => {\n    //     if (piece === \"wP\" || piece === \"bP\") {\n    //         if (to[1] === \"1\" || to[1] === \"8\") return true;\n    //     }\n    //     return false;\n    // };\n\n    let makeMove = (move) => {\n        const gameCopy = { ...game };\n        const result = gameCopy.move(move);\n        // console.log(result);\n        if (result) setGame(gameCopy);\n    };\n\n    let IsMoveCorrect = (playedMove, correctMove) => {\n        const gameCopy1 = new Chess(game.fen());\n        const gameCopy2 = new Chess(game.fen());\n        gameCopy1.move(playedMove);\n        gameCopy2.move(correctMove);\n        return gameCopy1.fen() === gameCopy2.fen();\n    };\n\n    let updateCurrentMove = () => {\n        currentMove++;\n        if (currentMove === puzzles[currentPuzzle].moves.length) {\n            setMoveStatus(2);\n        }\n    };\n\n    let PieceMoved = (source, target, piece) => {\n        // console.log(IsPromotion(source, target, piece));\n        let move = { from: source, to: target };\n        let isCorrect = IsMoveCorrect(\n            move,\n            puzzles[currentPuzzle].moves[currentMove]\n        );\n        if (isCorrect) {\n            setMoveStatus(1);\n            updateCurrentMove();\n        }\n\n        makeMove(move);\n\n        // playing enemy move\n        if (isCorrect) {\n            setTimeout(() => {\n                makeMove(puzzles[currentPuzzle].moves[currentMove]);\n                updateCurrentMove();\n                setTimeout(() => {\n                    setMoveStatus((prev) => {\n                        if (prev !== 2) return 0;\n                        else {\n                            setSolvedPuzzles((prev) => {\n                                if (!prev.includes(currentPuzzle)) {\n                                    prev = [...prev, currentPuzzle];\n                                }\n                                return prev;\n                            });\n                            return 2;\n                        }\n                    });\n                }, 500);\n            }, 200);\n        } else {\n            setMoveStatus(-1);\n        }\n    };\n\n    let clicked = () => {\n        if (moveStatus === -1) {\n            // wrong\n            console.log(puzzles[currentPuzzle].moves);\n            const gameCopy = { ...game };\n            gameCopy.undo();\n            setGame(gameCopy);\n            setMoveStatus(0);\n        } else if (moveStatus === 0) {\n            // hint\n            const gameCopy = { ...game };\n            gameCopy.move(puzzles[currentPuzzle].moves[currentMove]);\n            let HintMove = gameCopy.undo();\n            setHints([[HintMove.from, HintMove.to]]);\n        } else if (moveStatus === 2) {\n            // load next puzzle\n            setMoveStatus(0);\n            setCurrentPuzzle((prev) => {\n                const gameCopy = { ...game };\n                gameCopy.load(puzzles[prev + 1].fen);\n                setGame(gameCopy);\n                currentMove = 0;\n                return prev + 1;\n            });\n        }\n    };\n\n    let changePuzzle = (puzzleNumber) => {\n        setMoveStatus(0);\n        setCurrentPuzzle((prev) => {\n            const gameCopy = { ...game };\n            gameCopy.load(puzzles[puzzleNumber - 1].fen);\n            setGame(gameCopy);\n            currentMove = 0;\n            return puzzleNumber - 1;\n        });\n\n        CloseSideBar();\n    };\n\n    let OpenSideBar = () => {\n        SetIsSideOpen(true);\n    };\n\n    let CloseSideBar = () => {\n        setCurrentMenu([-1, -1]);\n        SetIsSideOpen(false);\n    };\n\n    let cards = [];\n\n    if (currentMenu[0] === -1) {\n        for (let i = 0; i < contents.length; i++) {\n            cards.push(\n                <div\n                    className={`\n            ${classes.MenuCard}\n            ${classes.ContentCard}\n            `}\n                    onClick={() => {\n                        setCurrentMenu((prev) => {\n                            let newMenu = [...prev];\n                            newMenu[0] = i;\n                            return newMenu;\n                        });\n                    }}\n                    key={i}\n                >\n                    {contents[i].Title}\n                </div>\n            );\n        }\n    } else if (currentMenu[1] === -1) {\n        for (let i = 0; i < 3; i++) {\n            cards.push(\n                <div\n                    className={`\n              ${classes.MenuCard}\n              ${classes.ContentCard}\n              `}\n                    onClick={() => {\n                        setCurrentMenu((prev) => {\n                            let newMenu = [...prev];\n                            newMenu[1] = i;\n                            return newMenu;\n                        });\n                    }}\n                    key={i}\n                >\n                    {difficulties[i]}\n                </div>\n            );\n        }\n    } else {\n        let start =\n            contents[currentMenu[0]][difficulties[currentMenu[1]] + \"_Start\"];\n        let end =\n            contents[currentMenu[0]][difficulties[currentMenu[1]] + \"_End\"];\n        for (let i = start; i <= end; i++) {\n            cards.push(\n                <div\n                    className={`\n      ${classes.MenuCard}\n      ${classes.PuzzleCard}\n      ${solvedPuzzles.includes(i - 1) && classes.PuzzleSolvedCard}\n      `}\n                    onClick={() => {\n                        changePuzzle(i);\n                    }}\n                    key={i}\n                >\n                    {i}\n                </div>\n            );\n        }\n    }\n\n    const config = {\n        delta: 10, // min distance(px) before a swipe starts. *See Notes*\n        preventScrollOnSwipe: false, // prevents scroll during swipe (*See Details*)\n        trackTouch: true, // track touch input\n        trackMouse: false, // track mouse input\n        rotationAngle: 0, // set a rotation angle\n        swipeDuration: Infinity, // allowable duration of a swipe (ms). *See Notes*\n        touchEventOptions: { passive: true }, // options for touch listeners (*See Details*)\n    };\n\n    const swipelefthandler = useSwipeable({\n        onSwipedLeft: (e) => {\n            CloseSideBar();\n        },\n        ...config,\n    });\n    const swiperighthandler = useSwipeable({\n        onSwipedRight: (e) => {\n            OpenSideBar();\n        },\n        ...config,\n    });\n\n    // useEffect(() => {\n    //     console.log(\"loading\");\n    //     const solves = JSON.parse(localStorage.getItem(\"SolvedPuzzles\"));\n    //     if (solves) setSolvedPuzzles(solves);\n\n    //     console.log(solves);\n    // }, []);\n\n    useEffect(() => {\n        let data = JSON.stringify(solvedPuzzles);\n        localStorage.setItem(\"SolvedPuzzles\", data);\n    }, [solvedPuzzles]);\n\n    return (\n        <div className={classes.App}>\n            <div className={classes.swipearea} {...swiperighthandler}></div>\n            <div\n                className={`${classes.overlay} ${\n                    !isSideOpen && classes.overlayHidden\n                }`}\n                onClick={CloseSideBar}\n                {...swipelefthandler}\n            >\n                <div\n                    className={`\n                    ${classes.SideBar}\n                    ${!isSideOpen && classes.sideHidden}\n                    ${\n                        currentMenu[1] === -1\n                            ? classes.SideMenu\n                            : classes.SidePuzzles\n                    }\n                    `}\n                    onClick={(e) => {\n                        e.stopPropagation();\n                    }}\n                    // {...swipelefthandler}\n                >\n                    {cards}\n                </div>\n            </div>\n            <Chessboard\n                id=\"Board\"\n                position={game.fen()}\n                arePiecesDraggable={true}\n                onPieceDrop={PieceMoved}\n                boardOrientation={puzzles[currentPuzzle].turn}\n                customArrows={hints}\n                boardWidth={isMobile ? 350 : 560}\n                onSquareClick={(s) => {\n                    console.log(s, typeof s);\n                }}\n            />\n            <div className={classes.msg}>\n                <div\n                    className={`\n                    ${classes.button}\n                    ${(moveStatus === 1 || moveStatus === 2) && classes.Correct}\n                    ${moveStatus === -1 && classes.Wrong}\n                    `}\n                    onClick={clicked}\n                >\n                    {moveStatus === 2 && \"Next Puzzle\"}\n                    {moveStatus === 1 && \"Correct\"}\n                    {moveStatus === 0 && \"Hint\"}\n                    {moveStatus === -1 && \"Retry\"}\n                </div>\n            </div>\n\n            <img\n                onClick={OpenSideBar}\n                src={menuIcon}\n                alt=\"menu-icon\"\n                className={classes.menuIcon}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1CQPS\",\"swipearea\":\"App_swipearea__b5vrt\",\"msg\":\"App_msg__zNxm2\",\"button\":\"App_button__izWfu\",\"Correct\":\"App_Correct__34VvJ\",\"Wrong\":\"App_Wrong__VINz8\",\"overlay\":\"App_overlay__2xu9d\",\"overlayHidden\":\"App_overlayHidden__3Yo2-\",\"SideBar\":\"App_SideBar__ksPW6\",\"sideHidden\":\"App_sideHidden__1U7w_\",\"SideMenu\":\"App_SideMenu__1LgUg\",\"SidePuzzles\":\"App_SidePuzzles__3u5wc\",\"MenuCard\":\"App_MenuCard__2nq83\",\"PuzzleCard\":\"App_PuzzleCard__1L1jW\",\"PuzzleSolvedCard\":\"App_PuzzleSolvedCard__3reZO\",\"ContentCard\":\"App_ContentCard__VyBd3\",\"menuIcon\":\"App_menuIcon__32hL-\"};"],"sourceRoot":""}